# skeleton

# Input: install_prefix, install_datadir, install_includedir,
#        skeletonmm_pcname, skeletonmm_api_version, skeletonmm_requires,
#        install_pkgconfigdir, install_libdir, build_deprecated_api,
#        skeletonmm_major_version, skeletonmm_minor_version, skeletonmm_micro_version
# Output: pkg_conf_data, install_includeconfigdir

pkg_conf_data = configuration_data()
pkg_conf_data.set('prefix', install_prefix)
pkg_conf_data.set('exec_prefix', '${prefix}')
pkg_conf_data.set('libdir', '${exec_prefix}' / install_libdir)
pkg_conf_data.set('datarootdir', '${prefix}' / install_datadir)
pkg_conf_data.set('datadir', '${datarootdir}')
pkg_conf_data.set('includedir', '${prefix}' / install_includedir)
pkg_conf_data.set('srcdir', meson.current_source_dir())
pkg_conf_data.set('PACKAGE_TARNAME', meson.project_name())
pkg_conf_data.set('PACKAGE_VERSION', meson.project_version())
pkg_conf_data.set('SKELETONMM_MODULE_NAME', skeletonmm_pcname)
pkg_conf_data.set('SKELETONMM_API_VERSION', skeletonmm_api_version)
pkg_conf_data.set('SKELETONMM_MODULES', skeletonmm_requires)

if not build_deprecated_api
  pkg_conf_data.set('SKELETONMM_DISABLE_DEPRECATED', true)
endif
pkg_conf_data.set('SKELETONMM_MAJOR_VERSION', skeletonmm_major_version)
pkg_conf_data.set('SKELETONMM_MINOR_VERSION', skeletonmm_minor_version)
pkg_conf_data.set('SKELETONMM_MICRO_VERSION', skeletonmm_micro_version)

configure_file(
  input: 'skeletonmm.pc.in',
  output: skeletonmm_pcname + '.pc',
  configuration: pkg_conf_data,
  install_dir: install_pkgconfigdir,
)

configure_file(
  input: 'skeletonmm-uninstalled.pc.in',
  output: skeletonmm_pcname + '-uninstalled.pc',
  configuration: pkg_conf_data,
)

install_includeconfigdir = install_libdir / skeletonmm_pcname / 'include'
configure_file(
  input: 'skeletonmmconfig.h.in',
  output: '@BASENAME@',
  configuration: pkg_conf_data,
  install_dir: install_includeconfigdir,
)

subdir('skeletonmm')
